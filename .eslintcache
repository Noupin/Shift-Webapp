[{"C:\\Coding\\Projects\\Shift Webapp\\src\\App.tsx":"1","C:\\Coding\\Projects\\Shift Webapp\\src\\reportWebVitals.ts":"2","C:\\Coding\\Projects\\Shift Webapp\\src\\index.tsx":"3","C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\User\\Register.tsx":"4","C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\User\\Login.tsx":"5","C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\Button\\Button.tsx":"6","C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\TextBox\\TextBox.tsx":"7","C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\Checkbox\\Checkbox.tsx":"8","C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\User\\Account.tsx":"9","C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\User\\ForgotPassword.tsx":"10","C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\Navbar\\Navbar.tsx":"11","C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\Load\\Load.tsx":"12","C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\Train\\Train.tsx":"13","C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\Shift\\Shift.tsx":"14","C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\Media\\Media.tsx":"15","C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\Image\\Image.tsx":"16","C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\Video\\Video.tsx":"17","C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\MediaList\\MediaList.tsx":"18","C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\Train\\AdvancedTrain.tsx":"19","C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\FileDialog\\FileDialog.tsx":"20","C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\Navbar\\UserElements.tsx":"21","C:\\Coding\\Projects\\Shift Webapp\\src\\Helpers\\dragAndDrop.ts":"22","C:\\Coding\\Projects\\Shift Webapp\\src\\Helpers\\Files.ts":"23","C:\\Coding\\Projects\\Shift Webapp\\src\\Helpers\\Arrays.ts":"24","C:\\Coding\\Projects\\Shift Webapp\\src\\constants.tsx":"25","C:\\Coding\\Projects\\Shift Webapp\\src\\Hooks\\Fetch.ts":"26","C:\\Coding\\Projects\\Shift Webapp\\src\\Hooks\\Images.ts":"27","C:\\Coding\\Projects\\Shift Webapp\\src\\Hooks\\Interval.ts":"28","C:\\Coding\\Projects\\Shift Webapp\\src\\Helpers\\AuthenticateUser.ts":"29"},{"size":5172,"mtime":1617935169636,"results":"30","hashOfConfig":"31"},{"size":425,"mtime":1606695268610,"results":"32","hashOfConfig":"31"},{"size":501,"mtime":1607455320057,"results":"33","hashOfConfig":"31"},{"size":4594,"mtime":1617935213271,"results":"34","hashOfConfig":"31"},{"size":4643,"mtime":1617935199284,"results":"35","hashOfConfig":"31"},{"size":580,"mtime":1610064201558,"results":"36","hashOfConfig":"31"},{"size":658,"mtime":1609779161561,"results":"37","hashOfConfig":"31"},{"size":645,"mtime":1609779978263,"results":"38","hashOfConfig":"31"},{"size":1217,"mtime":1617758994006,"results":"39","hashOfConfig":"31"},{"size":3006,"mtime":1617758992969,"results":"40","hashOfConfig":"31"},{"size":1551,"mtime":1617935185966,"results":"41","hashOfConfig":"31"},{"size":7934,"mtime":1617935317182,"results":"42","hashOfConfig":"31"},{"size":5094,"mtime":1617758996466,"results":"43","hashOfConfig":"31"},{"size":4066,"mtime":1617922772998,"results":"44","hashOfConfig":"31"},{"size":1842,"mtime":1617116183107,"results":"45","hashOfConfig":"31"},{"size":507,"mtime":1609894222749,"results":"46","hashOfConfig":"31"},{"size":664,"mtime":1609894227238,"results":"47","hashOfConfig":"31"},{"size":1103,"mtime":1609894281598,"results":"48","hashOfConfig":"31"},{"size":4837,"mtime":1617758995368,"results":"49","hashOfConfig":"31"},{"size":869,"mtime":1609891206709,"results":"50","hashOfConfig":"31"},{"size":2832,"mtime":1617935178790,"results":"51","hashOfConfig":"31"},{"size":1036,"mtime":1610147726531,"results":"52","hashOfConfig":"31"},{"size":724,"mtime":1610141908459,"results":"53","hashOfConfig":"31"},{"size":169,"mtime":1610067728782,"results":"54","hashOfConfig":"31"},{"size":204,"mtime":1617935323796,"results":"55","hashOfConfig":"31"},{"size":1241,"mtime":1617756264330,"results":"56","hashOfConfig":"31"},{"size":1258,"mtime":1617756260740,"results":"57","hashOfConfig":"31"},{"size":1234,"mtime":1617759908139,"results":"58","hashOfConfig":"31"},{"size":1004,"mtime":1617932940631,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hd1ldu",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"C:\\Coding\\Projects\\Shift Webapp\\src\\App.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\reportWebVitals.ts",[],["125","126"],"C:\\Coding\\Projects\\Shift Webapp\\src\\index.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\User\\Register.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\User\\Login.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\Button\\Button.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\TextBox\\TextBox.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\Checkbox\\Checkbox.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\User\\Account.tsx",["127","128"],"//Third Party Imports\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n//First Party Imports\r\nimport { useFetch } from \"../../Hooks/Fetch\";\r\nimport { IElevatedStateProps } from '../../Interfaces/ElevatedStateProps';\r\n\r\n\r\ninterface accountRequestReturn {\r\n  username: string,\r\n}\r\n\r\n\r\nexport function Account (props: IElevatedStateProps){\r\n  const {elevatedState, setElevatedState, ...accountProps} = props;\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n\r\n  const [fetching, setFetching] = useState(true);\r\n  const [accountResponse, setAccountResponse] = useState<accountRequestReturn>()\r\n\r\n  const requestOptions: RequestInit = {\r\n    method: 'GET',\r\n    credentials: \"include\",\r\n    headers: { 'Content-Type': 'application/json' }\r\n  };\r\n\r\n\r\n  const fetchAccount = useFetch(setFetching, setElevatedState, setAccountResponse, `/api/users/account`, () => requestOptions, accountResponse)\r\n\r\n  useEffect(() => {\r\n    if(!fetching) return;\r\n    fetchAccount()\r\n  }, [fetching]);\r\n\r\n  useEffect(() => {\r\n    if(!accountResponse) return;\r\n    setUsername(accountResponse!.username);\r\n  }, [accountResponse]);\r\n\r\n\r\n  return (\r\n    <>\r\n      <h2>{username}</h2>\r\n      <p>Your account page.</p>\r\n    </>\r\n  );\r\n}","C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\User\\ForgotPassword.tsx",["129","130"],"//Third Party Imports\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\n//First Party Imports\r\nimport { Button } from '../../Components/Button/Button';\r\nimport { TextBox } from '../../Components/TextBox/TextBox';\r\nimport { useFetch } from \"../../Hooks/Fetch\";\r\nimport { IElevatedStateProps } from '../../Interfaces/ElevatedStateProps';\r\n\r\n\r\ninterface resetPasswordRequestReturn {\r\n  msg: string\r\n}\r\n\r\n\r\nexport function ForgotPassword (props: IElevatedStateProps){\r\n  const {elevatedState, setElevatedState, ...forgotPasswordProps} = props;\r\n\r\n  const [currentPassword, setCurrentPassword] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n  const [fetching, setFetching] = useState(false);\r\n  const [registerResponse, setRegisterResponse] = useState<resetPasswordRequestReturn>();\r\n\r\n  let requestOptions: RequestInit = {};\r\n\r\n\r\n  const fetchResetPassword = useFetch(setFetching, setElevatedState, setRegisterResponse, `/api/users/resetPassword`, () => requestOptions, registerResponse)\r\n\r\n  useEffect(() => {\r\n    if(fetching) return;\r\n\r\n    if (password !== confirmPassword){\r\n      setElevatedState((prev) => ({...prev, msg: \"Passwords do not match\"}));\r\n      setFetching(false)\r\n      return;\r\n    }\r\n\r\n    requestOptions = {\r\n      method: 'POST',\r\n      credentials: \"include\",\r\n      headers: { 'Content-Type': 'application/json'},\r\n      body: JSON.stringify({currentPassword: currentPassword, password: password})\r\n    };\r\n\r\n    fetchResetPassword()\r\n  }, [fetching]);\r\n\r\n  useEffect(() => {\r\n    if(!registerResponse) return;\r\n  }, [registerResponse]);\r\n\r\n\r\n  return (\r\n    <Container className=\"d-flex justify-content-center h-100 flex-column\">\r\n      <Row className=\"mt-auto mb-auto\">\r\n        <Col xs={3}></Col>\r\n        <Col xs={6}>\r\n          <Row className=\"justify-content-center\">\r\n            <h2>Reset Password</h2>\r\n          </Row>\r\n\r\n          <br/>\r\n\r\n          <Row>\r\n            <TextBox className=\"m-2 p-2 borderRadius-2 w-100\" type=\"password\" placeholder=\"Current Password\" onBlur={(event) => setCurrentPassword(event.target.value)}/>\r\n          </Row>\r\n          <Row>\r\n            <TextBox className=\"m-2 p-2 borderRadius-2 w-100\" type=\"password\" placeholder=\"New Password\" onBlur={(event) => setPassword(event.target.value)}/>\r\n          </Row>\r\n          <Row>\r\n            <TextBox className=\"m-2 p-2 borderRadius-2 w-100\" type=\"password\" placeholder=\"Confirm Password\" onBlur={(event) => setConfirmPassword(event.target.value)}/>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col xs={2}></Col>\r\n            <Col xs={8}>\r\n              <Button className=\"mt-3 m-2 p-2 borderRadius-2 w-100\" onClick={() => setFetching(true)}>Update &#10140;</Button>\r\n            </Col>\r\n            <Col xs={2}></Col>\r\n          </Row>\r\n\r\n          <br/>\r\n        </Col>\r\n        <Col xs={3}></Col>\r\n      </Row>\r\n\r\n    </Container>\r\n  );\r\n}","C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\Navbar\\Navbar.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\Load\\Load.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\Train\\Train.tsx",["131","132","133","134","135","136","137","138","139","140","141"],"//Third Party Imports\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\n//First Party Imports\r\nimport { ITrainRequestReturn } from \"../../Interfaces/Train\";\r\nimport { Button } from '../../Components/Button/Button';\r\nimport { Media } from '../../Components/Media/Media';\r\nimport { defaultVideo } from \"../../constants\";\r\nimport { useFetch } from \"../../Hooks/Fetch\";\r\nimport { useConvertImage } from \"../../Hooks/Images\";\r\nimport { IElevatedStateProps } from '../../Interfaces/ElevatedStateProps';\r\n\r\n\r\nexport function Train (props: IElevatedStateProps){\r\n  const {elevatedState, setElevatedState, ...trainProps} = props;\r\n  useEffect(() => {\r\n    setElevatedState((prev) => ({...prev, shiftUUID: sessionStorage[\"shiftUUID\"]}))\r\n    setElevatedState((prev) => ({...prev, prebuiltShiftModel: elevatedState().shiftUUID}))\r\n  }, []);\r\n\r\n  const [stopTrain, setStopTrain] = useState(false);\r\n  const [stopping, setStopping] = useState(false);\r\n  const [advancedView, setAdvancedView] = useState(false);\r\n  const [imageString, setImageString] = useState(\"\");\r\n  const [image, setImage] = useState(defaultVideo);\r\n\r\n  const history = useHistory()\r\n\r\n  const [training, setTraining] = useState(true);\r\n  const [updating, setUpdating] = useState(false);\r\n  const [stop, setStop] = useState(false);\r\n  const [trainResponse, setTrainResponse] = useState<ITrainRequestReturn>();\r\n  const [converting, setConverting] = useState(false);\r\n\r\n  let requestOptions: RequestInit = {};\r\n\r\n  function updateRequestOptions(){\r\n    requestOptions = {\r\n      method: 'POST',\r\n      credentials: \"include\",\r\n      headers: { 'Content-Type': 'application/json'},\r\n      body: JSON.stringify({shiftUUID: elevatedState().shiftUUID,\r\n                            usePTM: elevatedState().usePTM,\r\n                            prebuiltShiftModel: elevatedState().prebuiltShiftModel,\r\n                            epochs: elevatedState().trainStatusInterval,\r\n                            trainType: 'basic'})\r\n    };\r\n  }\r\n\r\n\r\n  const startTraining = useFetch(setTraining, setElevatedState, setTrainResponse, `/api/train`, () => requestOptions, trainResponse)\r\n  const updateStatus = useFetch(setUpdating, setElevatedState, setTrainResponse, `/api/trainStatus`, () => requestOptions, trainResponse)\r\n  const stopTraining = useFetch(setStop, setElevatedState, setTrainResponse, `/api/stopTraining`, () => requestOptions, trainResponse)\r\n  const convertImage = useConvertImage(setConverting, setElevatedState, setImage, () => imageString);\r\n\r\n\r\n  //Start training the AI on the backend\r\n  useEffect(() => {\r\n    if(!training) return;\r\n\r\n    updateRequestOptions()\r\n\r\n    startTraining()\r\n  }, [training]);\r\n\r\n  //Get the updated shift image\r\n  useEffect(() => {\r\n    if(!updating) return;\r\n\r\n    updateRequestOptions()\r\n\r\n    updateStatus()\r\n  }, [updating]);\r\n\r\n  //Stop training the AI on the backend\r\n  useEffect(() => {\r\n    if(!stop) return;\r\n\r\n    updateRequestOptions()\r\n\r\n    stopTraining();\r\n    setStopping(true);\r\n  }, [stop]);\r\n\r\n  //Update training status every second\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if(stopping && !stopTrain){\r\n        updateRequestOptions();\r\n        updateStatus();\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [stopping]);\r\n\r\n\r\n  //Update the image displayed to the user and stop the training interval\r\n  useEffect(() => {\r\n    if(!trainResponse) return;\r\n\r\n    setElevatedState((prev) => ({...prev, msg: trainResponse!.msg}));\r\n\r\n    if(trainResponse!.stopped){\r\n      setStopTrain(true);\r\n    }\r\n\r\n    if(!trainResponse!.exhibit) return;\r\n\r\n    setImageString(trainResponse!.exhibit[0]);\r\n  }, [trainResponse]);\r\n\r\n  //Convert imageString to a useable image\r\n  useEffect(() => {\r\n    if(!imageString) return;\r\n\r\n\t\tconvertImage()\r\n\t}, [imageString]);\r\n\r\n  //Move the user to other pages on button clicks\r\n  useEffect(() => {\r\n    if(stopTrain){\r\n      history.push(\"/shift\")\r\n    }\r\n\r\n    if(advancedView){\r\n      history.push(\"/advancedTrain\")\r\n    }\r\n\r\n  }, [stopTrain, advancedView])\r\n\r\n\r\n  return (\r\n    <Container className=\"d-flex justify-content-center h-100 flex-column\" key={image.lastModified}>\r\n      <Row className=\"my-2\">\r\n        <Media setElevatedState={setElevatedState} className=\"neumorphic borderRadius-2 my-2 w-100 p-2\" mediaSrc={image} mediaType=\"video/mp4\"/>\r\n      </Row>\r\n      <Row>\r\n        <Col xs={2}></Col>\r\n        <Col xs={4}>\r\n          <Button className=\"p-2 mt-2 mb-2 mr-4 borderRadius-2 w-100\" disabled={advancedView} onClick={() => setAdvancedView(true)}>Advanced View</Button>\r\n        </Col>\r\n        <Col xs={4}>\r\n          <Button className=\"p-2 mt-2 mb-2 ml-4 borderRadius-2 w-100\" disabled={stopTrain} onClick={() => setStop(true)}>Stop Training</Button>\r\n        </Col>\r\n        <Col xs={2}><Button className=\"p-2 mt-2 mb-2 ml-4 borderRadius-2 w-100\" disabled={stopTrain} onClick={() => setUpdating(true)}>Update</Button></Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}","C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\Shift\\Shift.tsx",["142","143","144","145"],"//Third Party Imports\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n//First Party Imports\r\nimport { Button } from '../../Components/Button/Button';\r\nimport { Media } from '../../Components/Media/Media';\r\nimport { defaultVideo } from \"../../constants\";\r\nimport { useFetch } from \"../../Hooks/Fetch\";\r\nimport { useInterval } from \"../../Hooks/Interval\";\r\nimport { IElevatedStateProps } from '../../Interfaces/ElevatedStateProps';\r\n\r\n\r\ninterface shiftRequestReturn {\r\n\tmsg: string,\r\n\tstopped: boolean\r\n}\r\n\r\n\r\nexport function Shift (props: IElevatedStateProps){\r\n\tconst {elevatedState, setElevatedState, ...shiftProps} = props;\r\n\r\n\tconst [image, setImage] = useState(defaultVideo);\r\n\r\n\tconst [shifting, setShifting] = useState(true);\r\n\tconst [stopShifting, setStopShifting] = useState(false);\r\n\tconst [updating, setUpdating] = useState(false);\r\n  const [shiftResponse, setShiftResponse] = useState<shiftRequestReturn>();\r\n\tconst [updateProgress, setUpdateProgress] = useState(false);\r\n\tconst [fileResponse, setFileResponse] = useState<Blob>();\r\n\r\n\tlet requestOptions: RequestInit = {};\r\n\r\n\tfunction updateRequestOptions(method: string=\"POST\"){\r\n    requestOptions = {\r\n\t\t\tmethod: method,\r\n\t\t\tcredentials: \"include\",\r\n\t\t\theaders: { 'Content-Type': 'application/json'},\r\n\t\t\tbody: method === \"POST\" ? JSON.stringify({shiftUUID: elevatedState().shiftUUID,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  usePTM: elevatedState().usePTM,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  prebuiltShiftModel: elevatedState().prebuiltShiftModel}) : null\r\n\t\t};\r\n  }\r\n\r\n\r\n\r\n\tconst fetchInference = useFetch(setShifting, setElevatedState, setShiftResponse, `/api/inference`, () => requestOptions, shiftResponse)\r\n\tconst updateStatus = useFetch(setUpdateProgress, setElevatedState, setShiftResponse, `/api/inferenceStatus`, () => requestOptions, shiftResponse)\r\n\tconst getMedia = useFetch(setUpdateProgress, setElevatedState, setFileResponse, `/api/content/image/${elevatedState().shiftUUID}`, () => requestOptions, fileResponse)\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tif(!shifting) return;\r\n\r\n\t\tupdateRequestOptions();\r\n\r\n\t\tfetchInference();\r\n\t\tsetUpdating(true);\r\n\t}, [shifting]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif(!shiftResponse) return;\r\n\r\n\t\tsetElevatedState((prev) => ({...prev, msg: shiftResponse.msg}));\r\n\t}, [shiftResponse]);\r\n\r\n\tuseInterval(() => {\r\n\t\tif(updating || !stopShifting){\r\n\t\t\tupdateRequestOptions();\r\n\t\t\tupdateStatus();\r\n\r\n\t\t\tif(shiftResponse == null){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tsetStopShifting(shiftResponse.stopped);\r\n\r\n\t\t\tif(stopShifting){\r\n\t\t\t\tsetUpdating(false);\r\n\t\t\t\tupdateRequestOptions(\"GET\")\r\n\t\t\t\tgetMedia(\"blob\");\r\n\r\n\t\t\t\tif(fileResponse == null){\r\n\t\t\t\t\tsetUpdating(true);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetImage(new File([fileResponse], 'shifted.png', {type: \"media\"}))\r\n\t\t\t\tconsole.log(image)\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tsetUpdating(true);\r\n\t\t\t}\r\n\t\t}\r\n\t}, 1000);\r\n\r\n\r\n\treturn (\r\n\t\t<Container className=\"d-flex justify-content-center h-100 flex-column\" key={image.lastModified}>\r\n\t\t\t<Row className=\"mb-2\">\r\n\t\t\t\t<Media setElevatedState={setElevatedState} className=\"neumorphic borderRadius-2 p-2 my-2 w-100\" mediaSrc={image} mediaType=\"media\"/>\r\n\t\t\t</Row>\r\n\t\t\t<Row className=\"my-3\">\r\n\t\t\t\t<Media setElevatedState={setElevatedState} className=\"neumorphic borderRadius-2 p-2 my-2 w-100\" mediaSrc={defaultVideo} mediaType=\"video/mp4\"/>\r\n\t\t\t</Row>\r\n\t\t\t<Row className=\"my-2\">\r\n\t\t\t\t<Col xs={1}></Col>\r\n\t\t\t\t<Col xs={2}>\r\n\t\t\t\t\t<Link to=\"/train\" className=\"w-100\">\r\n            <Button className=\"borderRadius-2 p-2 mr-4 w-100\" disabled={shifting}>&#x2190; Train More</Button>\r\n          </Link>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col xs={2}>\r\n\t\t\t\t\t<Link to=\"/load\" className=\"w-100\">\r\n            <Button className=\"borderRadius-2 p-2 ml-4 w-100\" disabled={shifting} onClick={() => setShifting(true)}>Shift Again &#x21ba;</Button>\r\n          </Link>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col xs={1}></Col>\r\n\t\t\t\t<Col xs={5}>\r\n\t\t\t\t\t<Button className=\"borderRadius-2 p-2 w-100\" disabled={shifting}>Share</Button>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col xs={1}></Col>\r\n\t\t\t</Row>\r\n\t\t</Container>\r\n\t);\r\n}","C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\Media\\Media.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\Image\\Image.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\Video\\Video.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\MediaList\\MediaList.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Modules\\Train\\AdvancedTrain.tsx",["146","147","148","149","150","151","152","153","154","155"],"//Third Party Imports\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\n//First Party Imports\r\nimport { ITrainRequestReturn } from \"../../Interfaces/Train\";\r\nimport { Button } from '../../Components/Button/Button';\r\nimport { Media } from '../../Components/Media/Media';\r\nimport { defaultVideo } from \"../../constants\";\r\nimport { useFetch } from \"../../Hooks/Fetch\";\r\nimport { useConvertImage } from \"../../Hooks/Images\";\r\nimport { IElevatedStateProps } from '../../Interfaces/ElevatedStateProps';\r\n\r\n\r\nlet trainResponse: ITrainRequestReturn = {msg: \"\", exhibit: [], stopped: false}\r\n\r\n\r\nexport function AdvancedTrain (props: IElevatedStateProps){\r\n  const {elevatedState, setElevatedState, ...advancedTrainProps} = props;\r\n  useEffect(() => {\r\n    setElevatedState((prev) => ({...prev, shiftUUID: sessionStorage[\"shiftUUID\"]}))\r\n    setElevatedState((prev) => ({...prev, prebuiltShiftModel: elevatedState().shiftUUID}))\r\n  }, []);\r\n\r\n  const [basicView, setBasicView] = useState(false);\r\n  const [stopTrain, setStopTrain] = useState(false);\r\n\r\n  const [imageString, setImageString] = useState(\"\");\r\n  const [baseImage, setBaseImage] = useState(defaultVideo);\r\n  const [baseRemake, setBaseRemake] = useState(defaultVideo);\r\n  const [maskImage, setMaskmage] = useState(defaultVideo);\r\n  const [maskRemake, setMaskRemake] = useState(defaultVideo);\r\n\r\n  const history = useHistory()\r\n\r\n  const [fetching, setFetching] = useState(true);\r\n  const [trainResponse, setTrainResponse] = useState<ITrainRequestReturn>();\r\n  const [converting, setConverting] = useState(false);\r\n\r\n  let requestOptions: RequestInit = {};\r\n\r\n\r\n  const fetchTrain = useFetch(setFetching, setElevatedState, setTrainResponse, `/api/train`, () => requestOptions, trainResponse)\r\n  const convertImage = useConvertImage(setConverting, setElevatedState, setBaseImage, () => imageString);\r\n\r\n\r\n  useEffect(() => {\r\n    if(!fetching || stopTrain || basicView) return;\r\n\r\n    requestOptions = {\r\n      method: 'POST',\r\n      credentials: \"include\",\r\n      headers: { 'Content-Type': 'application/json'},\r\n      body: JSON.stringify({shiftUUID: elevatedState().shiftUUID,\r\n                            usePTM: elevatedState().usePTM,\r\n                            prebuiltShiftModel: elevatedState().prebuiltShiftModel,\r\n                            epochs: elevatedState().trainStatusInterval,\r\n                            trainType: 'basic'})\r\n    };\r\n\r\n    fetchTrain()\r\n  }, [fetching]);\r\n\r\n  useEffect(() => {\r\n    if(!converting || !trainResponse) return;\r\n\r\n    setElevatedState((prev) => ({...prev, msg: trainResponse!.msg}))\r\n    setImageString(trainResponse.exhibit[0]);\r\n  }, [trainResponse]);\r\n\r\n  useEffect(() => {\r\n\t\tif(!imageString) return;\r\n\t\tconvertImage()\r\n\t}, [imageString]);\r\n\r\n  useEffect(() => {\r\n    if(stopTrain){\r\n      history.push(\"/shift\")\r\n    }\r\n    if(basicView){\r\n      history.push(\"/train\")\r\n    }\r\n\r\n    if(baseImage === defaultVideo) return;\r\n\r\n    setFetching(true)\r\n  }, [baseImage, baseRemake, maskImage, maskRemake])\r\n\r\n\r\n\r\n  return (\r\n    <Container className=\"d-flex justify-content-center h-100 flex-column\" key={baseImage.lastModified}>\r\n      <Row>\r\n        <Col className=\"my-2 px-2\" xs={6}>\r\n          <Row className=\"my-2 ml-4 py-2\">\r\n            <Media setElevatedState={setElevatedState} className=\"neumorphic borderRadius-2 my-1 w-100 p-2\" mediaSrc={baseImage} mediaType=\"video/mp4\"/>\r\n          </Row>\r\n          <Row className=\"my-2 ml-4 py-2\">\r\n            <Media setElevatedState={setElevatedState} className=\"neumorphic borderRadius-2 my-1 w-100 p-2\" mediaSrc={defaultVideo} mediaType=\"video/mp4\"/>\r\n          </Row>\r\n        </Col>\r\n        <Col className=\"my-2 px-2\" xs={6}>\r\n          <Row className=\"my-2 ml-4 py-2\">\r\n            <Media setElevatedState={setElevatedState} className=\"neumorphic borderRadius-2 my-1 w-100 p-2\" mediaSrc={defaultVideo} mediaType=\"video/mp4\"/>\r\n          </Row>\r\n          <Row className=\"my-2 ml-4 py-2\">\r\n            <Media setElevatedState={setElevatedState} className=\"neumorphic borderRadius-2 my-1 w-100 p-2\" mediaSrc={defaultVideo} mediaType=\"video/mp4\"/>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col xs={2}></Col>\r\n        <Col xs={4} className=\"m-2\">\r\n          <Link to=\"/train\" className=\"w-100\">\r\n            <Button className=\"borderRadius-2 p-2 mr-2 w-100\" disabled={ basicView} onClick={() => setBasicView(true)}>Basic View</Button>\r\n          </Link>\r\n        </Col>\r\n        <Col xs={4} className=\"m-2\">\r\n          <Button className=\"borderRadius-2 p-2 ml-2 w-100\" disabled={stopTrain} onClick={() => setStopTrain(true)}>Stop Training</Button>\r\n        </Col>\r\n        <Col xs={2}></Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}","C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\FileDialog\\FileDialog.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Components\\Navbar\\UserElements.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Helpers\\dragAndDrop.ts",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Helpers\\Files.ts",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Helpers\\Arrays.ts",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\constants.tsx",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Hooks\\Fetch.ts",["156"],"import { IElevatedPageState } from \"../Interfaces/PageState\";\r\n\r\n\r\nexport function useFetch<T>(setLoading: React.Dispatch<React.SetStateAction<boolean>>,\r\n                            setElevatedState: React.Dispatch<React.SetStateAction<IElevatedPageState>>,\r\n                            setData: React.Dispatch<React.SetStateAction<T>>,\r\n                            url: string, requestOptions: () => RequestInit,\r\n                            defaultResponse: T): (responseType?: string) => Promise<void>{\r\n\r\n  async function call(responseType='json'){\r\n    setLoading(true);\r\n\r\n    try{\r\n      var response = await fetch(url, requestOptions());\r\n      var convertedResponse = null;\r\n\r\n      if(responseType === 'json'){\r\n        convertedResponse = await response.json();\r\n      }\r\n      else if(responseType === 'blob'){\r\n        convertedResponse = await response.blob();\r\n      }\r\n      else{\r\n        convertedResponse = response;\r\n      }\r\n\r\n      if(convertedResponse == null){\r\n        throw \"Fetch Response is Null\";\r\n      }\r\n\r\n      setData(convertedResponse!);\r\n      setLoading(false);\r\n    }\r\n    catch (error){\r\n      setLoading(false);\r\n      setElevatedState((prev) => ({...prev, error}));\r\n    }\r\n  }\r\n\r\n  return call\r\n}\r\n","C:\\Coding\\Projects\\Shift Webapp\\src\\Hooks\\Images.ts",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Hooks\\Interval.ts",[],"C:\\Coding\\Projects\\Shift Webapp\\src\\Helpers\\AuthenticateUser.ts",[],{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":15,"column":46,"nodeType":"163","messageId":"164","endLine":15,"endColumn":58},{"ruleId":"165","severity":1,"message":"166","line":34,"column":6,"nodeType":"167","endLine":34,"endColumn":16,"suggestions":"168"},{"ruleId":"161","severity":1,"message":"169","line":18,"column":46,"nodeType":"163","messageId":"164","endLine":18,"endColumn":65},{"ruleId":"165","severity":1,"message":"170","line":41,"column":22,"nodeType":"171","endLine":46,"endColumn":6},{"ruleId":"161","severity":1,"message":"172","line":4,"column":10,"nodeType":"163","messageId":"164","endLine":4,"endColumn":14},{"ruleId":"161","severity":1,"message":"173","line":17,"column":46,"nodeType":"163","messageId":"164","endLine":17,"endColumn":56},{"ruleId":"165","severity":1,"message":"174","line":21,"column":6,"nodeType":"167","endLine":21,"endColumn":8,"suggestions":"175"},{"ruleId":"161","severity":1,"message":"176","line":35,"column":10,"nodeType":"163","messageId":"164","endLine":35,"endColumn":20},{"ruleId":"165","severity":1,"message":"177","line":66,"column":6,"nodeType":"167","endLine":66,"endColumn":16,"suggestions":"178"},{"ruleId":"165","severity":1,"message":"179","line":75,"column":6,"nodeType":"167","endLine":75,"endColumn":16,"suggestions":"180"},{"ruleId":"165","severity":1,"message":"181","line":85,"column":6,"nodeType":"167","endLine":85,"endColumn":12,"suggestions":"182"},{"ruleId":"165","severity":1,"message":"183","line":97,"column":6,"nodeType":"167","endLine":97,"endColumn":16,"suggestions":"184"},{"ruleId":"165","severity":1,"message":"185","line":113,"column":6,"nodeType":"167","endLine":113,"endColumn":21,"suggestions":"186"},{"ruleId":"165","severity":1,"message":"187","line":120,"column":5,"nodeType":"167","endLine":120,"endColumn":18,"suggestions":"188"},{"ruleId":"165","severity":1,"message":"189","line":132,"column":6,"nodeType":"167","endLine":132,"endColumn":31,"suggestions":"190"},{"ruleId":"161","severity":1,"message":"191","line":23,"column":45,"nodeType":"163","messageId":"164","endLine":23,"endColumn":55},{"ruleId":"161","severity":1,"message":"192","line":31,"column":9,"nodeType":"163","messageId":"164","endLine":31,"endColumn":23},{"ruleId":"165","severity":1,"message":"193","line":61,"column":5,"nodeType":"167","endLine":61,"endColumn":15,"suggestions":"194"},{"ruleId":"165","severity":1,"message":"185","line":67,"column":5,"nodeType":"167","endLine":67,"endColumn":20,"suggestions":"195"},{"ruleId":"161","severity":1,"message":"196","line":16,"column":5,"nodeType":"163","messageId":"164","endLine":16,"endColumn":39},{"ruleId":"161","severity":1,"message":"197","line":20,"column":46,"nodeType":"163","messageId":"164","endLine":20,"endColumn":64},{"ruleId":"165","severity":1,"message":"174","line":24,"column":6,"nodeType":"167","endLine":24,"endColumn":8,"suggestions":"198"},{"ruleId":"161","severity":1,"message":"199","line":31,"column":22,"nodeType":"163","messageId":"164","endLine":31,"endColumn":35},{"ruleId":"161","severity":1,"message":"200","line":32,"column":21,"nodeType":"163","messageId":"164","endLine":32,"endColumn":32},{"ruleId":"161","severity":1,"message":"201","line":33,"column":22,"nodeType":"163","messageId":"164","endLine":33,"endColumn":35},{"ruleId":"165","severity":1,"message":"170","line":51,"column":22,"nodeType":"171","endLine":60,"endColumn":6},{"ruleId":"165","severity":1,"message":"202","line":70,"column":6,"nodeType":"167","endLine":70,"endColumn":21,"suggestions":"203"},{"ruleId":"165","severity":1,"message":"187","line":75,"column":5,"nodeType":"167","endLine":75,"endColumn":18,"suggestions":"204"},{"ruleId":"165","severity":1,"message":"205","line":88,"column":6,"nodeType":"167","endLine":88,"endColumn":52,"suggestions":"206"},{"ruleId":"207","severity":1,"message":"208","line":28,"column":9,"nodeType":"209","messageId":"210","endLine":28,"endColumn":40},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],"@typescript-eslint/no-unused-vars","'accountProps' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchAccount'. Either include it or remove the dependency array.","ArrayExpression",["213"],"'forgotPasswordProps' is assigned a value but never used.","Assignments to the 'requestOptions' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ObjectExpression","'Link' is defined but never used.","'trainProps' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'elevatedState' and 'setElevatedState'. Either include them or remove the dependency array.",["214"],"'converting' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'startTraining' and 'updateRequestOptions'. Either include them or remove the dependency array.",["215"],"React Hook useEffect has missing dependencies: 'updateRequestOptions' and 'updateStatus'. Either include them or remove the dependency array.",["216"],"React Hook useEffect has missing dependencies: 'stopTraining' and 'updateRequestOptions'. Either include them or remove the dependency array.",["217"],"React Hook useEffect has missing dependencies: 'stopTrain', 'updateRequestOptions', and 'updateStatus'. Either include them or remove the dependency array.",["218"],"React Hook useEffect has a missing dependency: 'setElevatedState'. Either include it or remove the dependency array.",["219"],"React Hook useEffect has a missing dependency: 'convertImage'. Either include it or remove the dependency array.",["220"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["221"],"'shiftProps' is assigned a value but never used.","'updateProgress' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchInference' and 'updateRequestOptions'. Either include them or remove the dependency array.",["222"],["223"],"'trainResponse' is assigned a value but never used.","'advancedTrainProps' is assigned a value but never used.",["224"],"'setBaseRemake' is assigned a value but never used.","'setMaskmage' is assigned a value but never used.","'setMaskRemake' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'converting' and 'setElevatedState'. Either include them or remove the dependency array.",["225"],["226"],"React Hook useEffect has missing dependencies: 'basicView', 'history', and 'stopTrain'. Either include them or remove the dependency array.",["227"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-global-assign","no-unsafe-negation",{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"230","fix":"250"},{"desc":"251","fix":"252"},{"desc":"242","fix":"253"},{"desc":"254","fix":"255"},"Update the dependencies array to be: [fetchAccount, fetching]",{"range":"256","text":"257"},"Update the dependencies array to be: [elevatedState, setElevatedState]",{"range":"258","text":"259"},"Update the dependencies array to be: [startTraining, training, updateRequestOptions]",{"range":"260","text":"261"},"Update the dependencies array to be: [updateRequestOptions, updateStatus, updating]",{"range":"262","text":"263"},"Update the dependencies array to be: [stop, stopTraining, updateRequestOptions]",{"range":"264","text":"265"},"Update the dependencies array to be: [stopTrain, stopping, updateRequestOptions, updateStatus]",{"range":"266","text":"267"},"Update the dependencies array to be: [setElevatedState, trainResponse]",{"range":"268","text":"269"},"Update the dependencies array to be: [convertImage, imageString]",{"range":"270","text":"271"},"Update the dependencies array to be: [stopTrain, advancedView, history]",{"range":"272","text":"273"},"Update the dependencies array to be: [fetchInference, shifting, updateRequestOptions]",{"range":"274","text":"275"},"Update the dependencies array to be: [setElevatedState, shiftResponse]",{"range":"276","text":"277"},{"range":"278","text":"259"},"Update the dependencies array to be: [converting, setElevatedState, trainResponse]",{"range":"279","text":"280"},{"range":"281","text":"271"},"Update the dependencies array to be: [baseImage, baseRemake, basicView, history, maskImage, maskRemake, stopTrain]",{"range":"282","text":"283"},[975,985],"[fetchAccount, fetching]",[941,943],"[elevatedState, setElevatedState]",[2772,2782],"[startTraining, training, updateRequestOptions]",[2926,2936],"[updateRequestOptions, updateStatus, updating]",[3109,3115],"[stop, stopTraining, updateRequestOptions]",[3392,3402],"[stopTrain, stopping, updateRequestOptions, updateStatus]",[3778,3793],"[setElevatedState, trainResponse]",[3918,3931],"[convertImage, imageString]",[4143,4168],"[stopTrain, advancedView, history]",[2190,2200],"[fetchInference, shifting, updateRequestOptions]",[2330,2345],"[setElevatedState, shiftResponse]",[1042,1044],[2759,2774],"[converting, setElevatedState, trainResponse]",[2851,2864],[3081,3127],"[baseImage, baseRemake, basicView, history, maskImage, maskRemake, stopTrain]"]