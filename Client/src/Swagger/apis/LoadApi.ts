/* tslint:disable */
/* eslint-disable */
/**
 * Shift
 * Shift Server API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LoadDataResponse,
    LoadDataResponseFromJSON,
    LoadDataResponseToJSON,
} from '../models';

export interface LoadDataRequest {
    trainingDataTypes: Array<string>;
    requestFiles: Array<Blob>;
}

/**
 * 
 */
export class LoadApi extends runtime.BaseAPI {

    /**
     * Given training data Shift specializes a model for the training data. Yeilds more relaisitic results than just an inference though it takes longer.
     */
    async loadDataRaw(requestParameters: LoadDataRequest): Promise<runtime.ApiResponse<LoadDataResponse>> {
        if (requestParameters.trainingDataTypes === null || requestParameters.trainingDataTypes === undefined) {
            throw new runtime.RequiredError('trainingDataTypes','Required parameter requestParameters.trainingDataTypes was null or undefined when calling loadData.');
        }

        if (requestParameters.requestFiles === null || requestParameters.requestFiles === undefined) {
            throw new runtime.RequiredError('requestFiles','Required parameter requestParameters.requestFiles was null or undefined when calling loadData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.trainingDataTypes) {
            headerParameters['trainingDataTypes'] = requestParameters.trainingDataTypes.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.requestFiles) {
            requestParameters.requestFiles.forEach((element) => {
                formParams.append('requestFiles', element as any);
            })
        }

        const response = await this.request({
            path: `/api/loadData`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoadDataResponseFromJSON(jsonValue));
    }

    /**
     * Given training data Shift specializes a model for the training data. Yeilds more relaisitic results than just an inference though it takes longer.
     */
    async loadData(requestParameters: LoadDataRequest): Promise<LoadDataResponse> {
        const response = await this.loadDataRaw(requestParameters);
        return await response.value();
    }

}
