/* tslint:disable */
/* eslint-disable */
/**
 * Shift
 * Shift Server API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    StopTrainResponse,
    StopTrainResponseFromJSON,
    StopTrainResponseToJSON,
    TrainRequest,
    TrainRequestFromJSON,
    TrainRequestToJSON,
    TrainResponse,
    TrainResponseFromJSON,
    TrainResponseToJSON,
    TrainStatusResponse,
    TrainStatusResponseFromJSON,
    TrainStatusResponseToJSON,
} from '../models';

export interface StopTrainRequest {
    body?: TrainRequest;
}

export interface TrainOperationRequest {
    body?: TrainRequest;
}

export interface TrainStatusRequest {
    body?: TrainRequest;
}

/**
 * 
 */
export class TrainApi extends runtime.BaseAPI {

    /**
     * Stop the training with the UUID of the shift model being trained.
     */
    async stopTrainRaw(requestParameters: StopTrainRequest): Promise<runtime.ApiResponse<StopTrainResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["session"] = this.configuration.apiKey("session"); // UserAuth authentication
        }

        const response = await this.request({
            path: `/api/stopTraining`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrainRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StopTrainResponseFromJSON(jsonValue));
    }

    /**
     * Stop the training with the UUID of the shift model being trained.
     */
    async stopTrain(requestParameters: StopTrainRequest): Promise<StopTrainResponse> {
        const response = await this.stopTrainRaw(requestParameters);
        return await response.value();
    }

    /**
     * Given training data Shift specializes a model for the training data. Yeilds more relaisitic results than just an inference though it takes longer.
     */
    async trainRaw(requestParameters: TrainOperationRequest): Promise<runtime.ApiResponse<TrainResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["session"] = this.configuration.apiKey("session"); // UserAuth authentication
        }

        const response = await this.request({
            path: `/api/train`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrainRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainResponseFromJSON(jsonValue));
    }

    /**
     * Given training data Shift specializes a model for the training data. Yeilds more relaisitic results than just an inference though it takes longer.
     */
    async train(requestParameters: TrainOperationRequest): Promise<TrainResponse> {
        const response = await this.trainRaw(requestParameters);
        return await response.value();
    }

    /**
     * The status of of the current training task if called while training the task will switch to give an update image. After a certain amount of time the training will be completed automatically to allow for multiple users to train.
     */
    async trainStatusRaw(requestParameters: TrainStatusRequest): Promise<runtime.ApiResponse<TrainStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["session"] = this.configuration.apiKey("session"); // UserAuth authentication
        }

        const response = await this.request({
            path: `/api/trainStatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrainRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrainStatusResponseFromJSON(jsonValue));
    }

    /**
     * The status of of the current training task if called while training the task will switch to give an update image. After a certain amount of time the training will be completed automatically to allow for multiple users to train.
     */
    async trainStatus(requestParameters: TrainStatusRequest): Promise<TrainStatusResponse> {
        const response = await this.trainStatusRaw(requestParameters);
        return await response.value();
    }

}
