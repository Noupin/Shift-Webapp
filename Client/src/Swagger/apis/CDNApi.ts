/* tslint:disable */
/* eslint-disable */
/**
 * Shift
 * Shift Server API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface GetImageDownloadRequest {
    filename: string;
    download: string;
}

export interface GetVideoRequest {
    filename: string;
}

export interface GetVideoDownloadRequest {
    filename: string;
    download: string;
}

export interface ImageRequest {
    filename: string;
}

/**
 * 
 */
export class CDNApi extends runtime.BaseAPI {

    /**
     * The image portion of the Shift CDN.
     */
    async getImageDownloadRaw(requestParameters: GetImageDownloadRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.filename === null || requestParameters.filename === undefined) {
            throw new runtime.RequiredError('filename','Required parameter requestParameters.filename was null or undefined when calling getImageDownload.');
        }

        if (requestParameters.download === null || requestParameters.download === undefined) {
            throw new runtime.RequiredError('download','Required parameter requestParameters.download was null or undefined when calling getImageDownload.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/content/image/{filename}/{download}`.replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters.filename))).replace(`{${"download"}}`, encodeURIComponent(String(requestParameters.download))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * The image portion of the Shift CDN.
     */
    async getImageDownload(requestParameters: GetImageDownloadRequest): Promise<object> {
        const response = await this.getImageDownloadRaw(requestParameters);
        return await response.value();
    }

    /**
     * The video portion of the Shift CDN.
     */
    async getVideoRaw(requestParameters: GetVideoRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.filename === null || requestParameters.filename === undefined) {
            throw new runtime.RequiredError('filename','Required parameter requestParameters.filename was null or undefined when calling getVideo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/content/video/{filename}`.replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters.filename))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * The video portion of the Shift CDN.
     */
    async getVideo(requestParameters: GetVideoRequest): Promise<object> {
        const response = await this.getVideoRaw(requestParameters);
        return await response.value();
    }

    /**
     * The video portion of the Shift CDN.
     */
    async getVideoDownloadRaw(requestParameters: GetVideoDownloadRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.filename === null || requestParameters.filename === undefined) {
            throw new runtime.RequiredError('filename','Required parameter requestParameters.filename was null or undefined when calling getVideoDownload.');
        }

        if (requestParameters.download === null || requestParameters.download === undefined) {
            throw new runtime.RequiredError('download','Required parameter requestParameters.download was null or undefined when calling getVideoDownload.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/content/video/{filename}/{download}`.replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters.filename))).replace(`{${"download"}}`, encodeURIComponent(String(requestParameters.download))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * The video portion of the Shift CDN.
     */
    async getVideoDownload(requestParameters: GetVideoDownloadRequest): Promise<object> {
        const response = await this.getVideoDownloadRaw(requestParameters);
        return await response.value();
    }

    /**
     * The image portion of the Shift CDN.
     */
    async imageRaw(requestParameters: ImageRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.filename === null || requestParameters.filename === undefined) {
            throw new runtime.RequiredError('filename','Required parameter requestParameters.filename was null or undefined when calling image.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/content/image/{filename}`.replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters.filename))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * The image portion of the Shift CDN.
     */
    async image(requestParameters: ImageRequest): Promise<object> {
        const response = await this.imageRaw(requestParameters);
        return await response.value();
    }

}
