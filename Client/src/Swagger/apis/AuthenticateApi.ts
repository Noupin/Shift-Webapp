/* tslint:disable */
/* eslint-disable */
/**
 * Shift
 * Shift Server API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ConfirmEmailResponse,
    ConfirmEmailResponseFromJSON,
    ConfirmEmailResponseToJSON,
    LoginRequest,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    LoginResponse,
    LoginResponseFromJSON,
    LoginResponseToJSON,
    LogoutResponse,
    LogoutResponseFromJSON,
    LogoutResponseToJSON,
    RefreshResponse,
    RefreshResponseFromJSON,
    RefreshResponseToJSON,
    RegisterRequest,
    RegisterRequestFromJSON,
    RegisterRequestToJSON,
    RegisterResponse,
    RegisterResponseFromJSON,
    RegisterResponseToJSON,
    ResendConfirmEmailResponse,
    ResendConfirmEmailResponseFromJSON,
    ResendConfirmEmailResponseToJSON,
} from '../models';

export interface ConfirmEmailRequest {
    token: string;
}

export interface LoginOperationRequest {
    body?: LoginRequest;
}

export interface RefreshRequest {
    feryvcsrftoken?: string | null;
    feryvrefreshtoken?: string | null;
}

export interface RegisterOperationRequest {
    body?: RegisterRequest;
}

/**
 * 
 */
export class AuthenticateApi extends runtime.BaseAPI {

    /**
     * Confirms the users email.
     */
    async confirmEmailRaw(requestParameters: ConfirmEmailRequest): Promise<runtime.ApiResponse<ConfirmEmailResponse>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling confirmEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/authenticate/confirm-email/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfirmEmailResponseFromJSON(jsonValue));
    }

    /**
     * Confirms the users email.
     */
    async confirmEmail(requestParameters: ConfirmEmailRequest): Promise<ConfirmEmailResponse> {
        const response = await this.confirmEmailRaw(requestParameters);
        return await response.value();
    }

    /**
     * The login for the user.
     */
    async loginRaw(requestParameters: LoginOperationRequest): Promise<runtime.ApiResponse<LoginResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/authenticate/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * The login for the user.
     */
    async login(requestParameters: LoginOperationRequest): Promise<LoginResponse> {
        const response = await this.loginRaw(requestParameters);
        return await response.value();
    }

    /**
     * Logs the user out.
     */
    async logoutRaw(): Promise<runtime.ApiResponse<LogoutResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/authenticate/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LogoutResponseFromJSON(jsonValue));
    }

    /**
     * Logs the user out.
     */
    async logout(): Promise<LogoutResponse> {
        const response = await this.logoutRaw();
        return await response.value();
    }

    /**
     * Refreshes the users access token.
     */
    async refreshRaw(requestParameters: RefreshRequest): Promise<runtime.ApiResponse<RefreshResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.feryvcsrftoken !== undefined && requestParameters.feryvcsrftoken !== null) {
            headerParameters['Feryvcsrftoken'] = String(requestParameters.feryvcsrftoken);
        }

        if (requestParameters.feryvrefreshtoken !== undefined && requestParameters.feryvrefreshtoken !== null) {
            headerParameters['Feryvrefreshtoken'] = String(requestParameters.feryvrefreshtoken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/authenticate/refresh`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshResponseFromJSON(jsonValue));
    }

    /**
     * Refreshes the users access token.
     */
    async refresh(requestParameters: RefreshRequest): Promise<RefreshResponse> {
        const response = await this.refreshRaw(requestParameters);
        return await response.value();
    }

    /**
     * The regitration for the user.
     */
    async registerRaw(requestParameters: RegisterOperationRequest): Promise<runtime.ApiResponse<RegisterResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/authenticate/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterResponseFromJSON(jsonValue));
    }

    /**
     * The regitration for the user.
     */
    async register(requestParameters: RegisterOperationRequest): Promise<RegisterResponse> {
        const response = await this.registerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Resends the email to confirm the user.
     */
    async resendConfirmEmailRaw(): Promise<runtime.ApiResponse<ResendConfirmEmailResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/authenticate/resend-confirm-email`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResendConfirmEmailResponseFromJSON(jsonValue));
    }

    /**
     * Resends the email to confirm the user.
     */
    async resendConfirmEmail(): Promise<ResendConfirmEmailResponse> {
        const response = await this.resendConfirmEmailRaw();
        return await response.value();
    }

}
