/* tslint:disable */
/* eslint-disable */
/**
 * Shift
 * Shift Server API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IndividualUserGetResponse,
    IndividualUserGetResponseFromJSON,
    IndividualUserGetResponseToJSON,
    ProfileResponse,
    ProfileResponseFromJSON,
    ProfileResponseToJSON,
    UserShiftsResponse,
    UserShiftsResponseFromJSON,
    UserShiftsResponseToJSON,
} from '../models';

export interface GetIndivdualUserRequest {
    username: string;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * The queried user
     */
    async getIndivdualUserRaw(requestParameters: GetIndivdualUserRequest): Promise<runtime.ApiResponse<IndividualUserGetResponse>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling getIndivdualUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IndividualUserGetResponseFromJSON(jsonValue));
    }

    /**
     * The queried user
     */
    async getIndivdualUser(requestParameters: GetIndivdualUserRequest): Promise<IndividualUserGetResponse> {
        const response = await this.getIndivdualUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * The users profile to display the on users the account page
     */
    async profileRaw(): Promise<runtime.ApiResponse<ProfileResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["session"] = this.configuration.apiKey("session"); // UserAuth authentication
        }

        const response = await this.request({
            path: `/api/user/data/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileResponseFromJSON(jsonValue));
    }

    /**
     * The users profile to display the on users the account page
     */
    async profile(): Promise<ProfileResponse> {
        const response = await this.profileRaw();
        return await response.value();
    }

    /**
     * The users shifts to display the users account page.
     */
    async userShiftsRaw(): Promise<runtime.ApiResponse<UserShiftsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["session"] = this.configuration.apiKey("session"); // UserAuth authentication
        }

        const response = await this.request({
            path: `/api/user/data/shifts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserShiftsResponseFromJSON(jsonValue));
    }

    /**
     * The users shifts to display the users account page.
     */
    async userShifts(): Promise<UserShiftsResponse> {
        const response = await this.userShiftsRaw();
        return await response.value();
    }

}
