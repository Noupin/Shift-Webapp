/* tslint:disable */
/* eslint-disable */
/**
 * Shift
 * Shift Server API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    IndividualShiftDeleteResponse,
    IndividualShiftDeleteResponseFromJSON,
    IndividualShiftDeleteResponseToJSON,
    IndividualShiftGetResponse,
    IndividualShiftGetResponseFromJSON,
    IndividualShiftGetResponseToJSON,
    IndividualShiftPatchRequest,
    IndividualShiftPatchRequestFromJSON,
    IndividualShiftPatchRequestToJSON,
    IndividualShiftPatchResponse,
    IndividualShiftPatchResponseFromJSON,
    IndividualShiftPatchResponseToJSON,
} from '../models';

export interface DeleteIndivdualShiftRequest {
    uuid: string;
}

export interface GetIndivdualShiftRequest {
    uuid: string;
}

export interface PatchIndivdualShiftRequest {
    uuid: string;
    body?: IndividualShiftPatchRequest;
}

/**
 * 
 */
export class ShiftApi extends runtime.BaseAPI {

    /**
     * Deletes the queried shift.
     */
    async deleteIndivdualShiftRaw(requestParameters: DeleteIndivdualShiftRequest): Promise<runtime.ApiResponse<IndividualShiftDeleteResponse>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteIndivdualShift.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/shift/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IndividualShiftDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Deletes the queried shift.
     */
    async deleteIndivdualShift(requestParameters: DeleteIndivdualShiftRequest): Promise<IndividualShiftDeleteResponse> {
        const response = await this.deleteIndivdualShiftRaw(requestParameters);
        return await response.value();
    }

    /**
     * The queried shift
     */
    async getIndivdualShiftRaw(requestParameters: GetIndivdualShiftRequest): Promise<runtime.ApiResponse<IndividualShiftGetResponse>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getIndivdualShift.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/shift/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IndividualShiftGetResponseFromJSON(jsonValue));
    }

    /**
     * The queried shift
     */
    async getIndivdualShift(requestParameters: GetIndivdualShiftRequest): Promise<IndividualShiftGetResponse> {
        const response = await this.getIndivdualShiftRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates/modifies the queried shift.
     */
    async patchIndivdualShiftRaw(requestParameters: PatchIndivdualShiftRequest): Promise<runtime.ApiResponse<IndividualShiftPatchResponse>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling patchIndivdualShift.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/shift/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: IndividualShiftPatchRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IndividualShiftPatchResponseFromJSON(jsonValue));
    }

    /**
     * Updates/modifies the queried shift.
     */
    async patchIndivdualShift(requestParameters: PatchIndivdualShiftRequest): Promise<IndividualShiftPatchResponse> {
        const response = await this.patchIndivdualShiftRaw(requestParameters);
        return await response.value();
    }

}
